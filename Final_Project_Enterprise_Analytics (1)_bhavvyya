{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project - end to end ML project "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importing necessary packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas_profiling\n",
    "from sklearn.impute import  SimpleImputer\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading file having information about ebola virus and various characteristics which might be insightful in inferring the effect of virus in a particular human being\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel(r\"C:\\Users\\bhavv\\OneDrive\\Desktop\\MMA2\\SEMESTER-3\\Enterprise\\Final_Project_dataset.xlsx\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DESCRIBING BASIC STATS RELATED TO THE DATA PRESENT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Case no.</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>2439.000000</td>\n",
       "      <td>2439.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>11.106191</td>\n",
       "      <td>50.851989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>15.600892</td>\n",
       "      <td>17.641605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>52.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>63.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>90.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Case no.          Age\n",
       "count  2439.000000  2439.000000\n",
       "mean     11.106191    50.851989\n",
       "std      15.600892    17.641605\n",
       "min       1.000000    10.000000\n",
       "25%       4.000000    36.000000\n",
       "50%       8.000000    52.000000\n",
       "75%      14.000000    63.000000\n",
       "max     208.000000    90.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fetching top 5 values in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Case no.</th>\n",
       "      <th>Date of notification to WHO (yyyy/mm/dd)</th>\n",
       "      <th>Reporting country</th>\n",
       "      <th>City of residence</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Health care worker</th>\n",
       "      <th>Comorbidities</th>\n",
       "      <th>Exposure to camels</th>\n",
       "      <th>Camel milk consumption</th>\n",
       "      <th>Exposure to MERS-CoV cases</th>\n",
       "      <th>Date of symptoms onset (yyyy/mm/dd)</th>\n",
       "      <th>Date of first hospitalization (yyyy/mm/dd)</th>\n",
       "      <th>Date of laboratory confirmation (yyyy/mm/dd)</th>\n",
       "      <th>Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2017-08-15</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>Madinah</td>\n",
       "      <td>67.0</td>\n",
       "      <td>M</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>2017-08-12 00:00:00</td>\n",
       "      <td>2017-08-14 00:00:00</td>\n",
       "      <td>2017-08-14</td>\n",
       "      <td>Alive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>Jeddah</td>\n",
       "      <td>69.0</td>\n",
       "      <td>M</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-13 00:00:00</td>\n",
       "      <td>2017-08-15 00:00:00</td>\n",
       "      <td>2017-08-15</td>\n",
       "      <td>Alive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2017-08-18</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>Jeddah</td>\n",
       "      <td>51.0</td>\n",
       "      <td>M</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-11 00:00:00</td>\n",
       "      <td>2017-08-17 00:00:00</td>\n",
       "      <td>2017-08-17</td>\n",
       "      <td>Alive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2017-08-21</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>Riyadh</td>\n",
       "      <td>48.0</td>\n",
       "      <td>M</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-18 00:00:00</td>\n",
       "      <td>2017-08-20 00:00:00</td>\n",
       "      <td>2017-08-20</td>\n",
       "      <td>Alive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2017-08-24</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>Dawmet Aljandal</td>\n",
       "      <td>40.0</td>\n",
       "      <td>F</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-17 00:00:00</td>\n",
       "      <td>2017-08-21 00:00:00</td>\n",
       "      <td>2017-08-22</td>\n",
       "      <td>Alive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Case no. Date of notification to WHO (yyyy/mm/dd) Reporting country  \\\n",
       "0       1.0                               2017-08-15      Saudi Arabia   \n",
       "1       2.0                               2017-08-16      Saudi Arabia   \n",
       "2       3.0                               2017-08-18      Saudi Arabia   \n",
       "3       4.0                               2017-08-21      Saudi Arabia   \n",
       "4       5.0                               2017-08-24      Saudi Arabia   \n",
       "\n",
       "  City of residence   Age Sex Health care worker Comorbidities  \\\n",
       "0          Madinah   67.0   M                 No           Yes   \n",
       "1            Jeddah  69.0   M                 No           Yes   \n",
       "2            Jeddah  51.0   M                 No           Yes   \n",
       "3            Riyadh  48.0   M                 No           Yes   \n",
       "4   Dawmet Aljandal  40.0   F                 No           Yes   \n",
       "\n",
       "  Exposure to camels Camel milk consumption Exposure to MERS-CoV cases  \\\n",
       "0                Yes                    NaN                         No   \n",
       "1                NaN                    NaN                        NaN   \n",
       "2                NaN                    NaN                        NaN   \n",
       "3                Yes                    Yes                        NaN   \n",
       "4                NaN                    NaN                        NaN   \n",
       "\n",
       "  Date of symptoms onset (yyyy/mm/dd)  \\\n",
       "0                 2017-08-12 00:00:00   \n",
       "1                 2017-08-13 00:00:00   \n",
       "2                 2017-08-11 00:00:00   \n",
       "3                 2017-08-18 00:00:00   \n",
       "4                 2017-08-17 00:00:00   \n",
       "\n",
       "  Date of first hospitalization (yyyy/mm/dd)  \\\n",
       "0                        2017-08-14 00:00:00   \n",
       "1                        2017-08-15 00:00:00   \n",
       "2                        2017-08-17 00:00:00   \n",
       "3                        2017-08-20 00:00:00   \n",
       "4                        2017-08-21 00:00:00   \n",
       "\n",
       "  Date of laboratory confirmation (yyyy/mm/dd) Status  \n",
       "0                                   2017-08-14  Alive  \n",
       "1                                   2017-08-15  Alive  \n",
       "2                                   2017-08-17  Alive  \n",
       "3                                   2017-08-20  Alive  \n",
       "4                                   2017-08-22  Alive  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2440 entries, 0 to 2439\n",
      "Data columns (total 15 columns):\n",
      "Case no.                                        2439 non-null float64\n",
      "Date of notification to WHO (yyyy/mm/dd)        2439 non-null datetime64[ns]\n",
      "Reporting country                               2439 non-null object\n",
      "City of residence                               2439 non-null object\n",
      "Age                                             2439 non-null float64\n",
      "Sex                                             2439 non-null object\n",
      "Health care worker                              2439 non-null object\n",
      "Comorbidities                                   2089 non-null object\n",
      "Exposure to camels                              1278 non-null object\n",
      "Camel milk consumption                          876 non-null object\n",
      "Exposure to MERS-CoV cases                      1220 non-null object\n",
      "Date of symptoms onset (yyyy/mm/dd)             1745 non-null object\n",
      "Date of first hospitalization (yyyy/mm/dd)      1653 non-null object\n",
      "Date of laboratory confirmation (yyyy/mm/dd)    2427 non-null datetime64[ns]\n",
      "Status                                          2439 non-null object\n",
      "dtypes: datetime64[ns](2), float64(2), object(11)\n",
      "memory usage: 286.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### count of cases reported per country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Saudi Arabia            2114\n",
       "Saudi Arabia             204\n",
       "United Arab Emirates      64\n",
       "Qatar                     36\n",
       "Lebanon                   11\n",
       "Oman                      10\n",
       "Name: Reporting country, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Reporting country\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### count of cases reported for given age value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57.0    102\n",
       "54.0     88\n",
       "48.0     78\n",
       "31.0     76\n",
       "58.0     74\n",
       "       ... \n",
       "14.0      8\n",
       "37.0      5\n",
       "90.0      2\n",
       "15.0      2\n",
       "13.0      2\n",
       "Name: Age, Length: 76, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Age\"].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Histograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x0000022135072F08>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x00000221357B6048>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(bins=50,figsize=(20,15))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting of data into X and y "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### splitting dataset into train and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Profiling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### handling missing values in the dataset by replacing them with mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### builidng regression model using random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fine-tuning the model by selecting the best possible value for hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building the final model with best hyperparameter value with lowest possible mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### information about Confidence interval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
